services:
  openresty:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: process_log_rabbitmq_openresty_server
    env_file:
      - ./nginx/.env
    ports:
      - "8080:8080"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - log-openresty:/usr/local/openresty/nginx/logs
    restart: unless-stopped
    command: ["openresty", "-g", "daemon off;"]
    depends_on:
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    networks:
      - app_network

#  rabbitmq:
#    build:
#      context: ./rabbitmq
#      dockerfile: Dockerfile
#    container_name: process_log_rabbitmq
#    hostname: rabbitmq
#    restart: always
#    env_file:
#      - ./rabbitmq/.env
#    environment:
#      - RABBITMQ_NODENAME=rabbit@process_log_rabbitmq
#    ports:
#      - "5552:5552"
#      - "5672:5672"
#      - "15672:15672"
#    volumes:
#      - rabbitmq-data:/var/lib/rabbitmq
#    healthcheck:
#      test: [ "CMD", "rabbitmqctl", "status" ]
#      interval: 15s
#      timeout: 10s
#      retries: 5
#    networks:
#      - app_network

#  rabbitmq:
#    build:
#      context: ./rabbitmq
#      dockerfile: ./Dockerfile
#    container_name: process_log_rabbitmq
#    restart: always
#    env_file:
#      - ./rabbitmq/.env
#    environment:
#      - RABBITMQ_NODENAME=rabbit@process_log_rabbitmq
#    ports:
#      - "5552:5552"
#      - "5672:5672"
#      - "15672:15672"
#    volumes:
#      - rabbitmq-data:/var/lib/rabbitmq
#    healthcheck:
#      test: ["CMD", "rabbitmq-diagnostics", "ping"]
#      interval: 15s
#      timeout: 10s
#      retries: 5
#    networks:
#      - app_network

  elixir_app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: process_log_elixir_app
    env_file:
      - ./app/.env
    ports:
      - "4000:4000"
    depends_on:
      grafana:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - grafana-data:/var/lib/grafana
      - ./app/wait_for_grafana_token.sh:/wait_for_grafana_token.sh:ro
    entrypoint: [ "/bin/sh", "-c", "/wait_for_grafana_token.sh && exec bin/app start" ]

  influxdb:
    image: influxdb:2.7
    container_name: process_log_influxdb
    restart: always
    ports:
      - "8086:8086"
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    container_name: process_log_prometheus
    volumes:
      - ./app/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://prometheus:9090/-/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - app_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    env_file:
      - ./grafana/.env
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://grafana:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - app_network

  grafana-setup:
    build:
      context: ./grafana-setup
      dockerfile: Dockerfile
    container_name: grafana_setup
    env_file:
      - ./grafana/.env
    depends_on:
      grafana:
        condition: service_healthy
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app_network

  postgres:
    image: postgres:15
    restart: always
    container_name: process_log_postgres
    env_file:
      - ./postgresql/.env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d/
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    container_name: process_log_elasticsearch
    restart: always
    env_file:
      - ./elasticsearch/.env
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL -u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  rabbitmq-data:
    driver: local
  log-openresty:
    driver: local
  pgdata:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local